/**
 * Creates an object composed of keys generated from the results of running each element
 * of an array through the iteratee. The corresponding value of each key is the number
 * of times the key was returned by the iteratee.
 *
 * @param {Array} array - The input array to process.
 * @param {Function|string} iteratee - The function invoked per element or the property name to group by.
 * @returns {Object} An object with keys generated by the iteratee and values representing the count of each key.
 */
export function countBy(array, iteratee) {
  // Initialize an empty object to store the results
  const result = {};

  // Loop through each element in the array
  for (const element of array) {
    // Determine the key by applying the iteratee
    // If the iteratee is a function, call it with the current element
    // If the iteratee is a string, treat it as a property name
    const key =
      typeof iteratee === 'function' ? iteratee(element) : element[iteratee];

    // Increment the count for the generated key
    // If the key does not exist, initialize it with 0 and then increment
    result[key] = (result[key] || 0) + 1;
  }

  // Return the final result object
  return result;
}

// Test cases

// Test with an array of numbers and Math.floor as the iteratee function
const numbers = [1.3, 2.1, 2.4];
console.log(countBy(numbers, Math.floor));
// Expected output: { '1': 1, '2': 2 }

// Test with an array of strings and a custom iteratee function based on string length
const strings = ['apple', 'banana', 'apple', 'cherry'];
console.log(countBy(strings, (str) => str.length));
// Expected output: { '5': 2, '6': 2 }

// Test with an array of strings and a property name as the iteratee
const words = ['one', 'two', 'three', 'four'];
console.log(countBy(words, 'length'));
// Expected output: { '3': 2, '5': 1, '4': 1 }

countBy([], (o) => o); // => {}

countBy([{ n: 1 }, { n: 2 }], (o) => o.m); // => { undefined: 2 }
